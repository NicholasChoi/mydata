- 마지막으로 수행한 명령의 return value 출력
echo $?

- shell command의 실행 출력물을 다른 shell command의 inline parameter로 사용하기
e.g. ls -al `which vim`
e.g. ls -al $(which vim)

- ls 사용시 '.'으로 시작하는 파일 및 디렉토리만 출력하기
ls -d .*

- ls 사용시 디렉토리만 출력하기
ls -d .*/ */

- git stash에 대해
// for storing
git stash
// for restoring
git stash pop --index

- git reset과 git checkout에 대해
git reset (= git reset --mixed HEAD)
    : index의 모든 entry가 HEAD의 그것과 같아지도록 함.
git reset filename (= git reset HEAD filename)
    : filename에 대응하는 index의 entry가 HEAD의 그것과 같아지도록 함.
git reset branchname (= git reset --mixed branchname)
    : branch의 전환없이,
      HEAD가 branchname에 대응하는 branch의 마지막 commit을 가리키도록 하고,
      index의 모든 entry가 HEAD의 그것과 같아지도록 함.
      (만약 branchname을 현재 branch와 다른 branch의 이름으로 지정한 경우,
          현재 branch에서 이루어졌던 commit이 사라지게 됨.)
git reset branchname filename
    : branch의 전환없이, filename에 대응하는 index의 entry가
      branchname에 대응하는 branch의 마지막 commit의 그것과 같아지도록 함.
git checkout
    : "check out the current branch"의 의미로서,
      아무 작업도 수행되지 않음.
git checkout filename
    : filename에 대응하는 working tree의 entry가 index의 그것과 같아지도록 함.
git checkout branchname
    : 현재 branch가 branchname에 대응하는 branch로 전환되고,
      HEAD가 branchname에 대응하는 branch의 마지막 commit을 가리키도록 하고,
      index의 모든 entry가 HEAD의 그것과 같아지도록 하고,
      HEAD의 모든 entry를 working tree에 복사함.
      (만약 branch A를 base로 하여 branch B를 생성하고,
          branch B에서, 트래킹되고 있는 file C를 삭제하고,
          신규 file D를 생성하고, file C와 file D 모두 unstaged 상태인 상황에서
          branch A로 전환한 경우, HEAD로부터 file C가 working tree에 복사되고,
          file D는 untracked 상태로 유지됨.)
git checkout branchname filename
    : branch의 전환없이, filename에 대응하는 index의 entry가
      branchname에 대응하는 branch의 마지막 commit의 그것과 같아지도록 하고,
      filename에 대응하는 상기 entry를 working tree에 복사함.
      (file을 overwriting하는 대신에 merging하고자 하는 경우엔
          '-p' 또는 '--patch' 옵션을 붙여 실행하면 도움이 됨.)

- copy to the clipboard
pbcopy
e.g. $ pbcopy
     sentence1<Ctrl + J>
     sentence2<Ctrl + D><Ctrl + D>
     $

- paste from the clipboard
pbpaste

- delete longest match of substring from front of $string
${string##substring}
e.g. The * is a wildcard, matching everything. The command ${0##/*} prints the value of $0 unless it starts with a forward slash, in which case it prints nothing.

- commands starting with '!'
!!  // run the last command again
!(string)  // run the last command starting with the string (e.g. $ !vi)
!?(string)  // run the last command containing the string (e.g. $ !?-al)

- 최근에 실행된 명령에서 일부를 치환하기
^(old string)^(new string)
e.g. $ ls text.c
     ......
     $ ^text^test

- frequently used keyboard shortcuts in Bash or Zsh
(a prerequisite for the Option key to work properly: "iTerm2" -> (select "Settings..." in the menu) -> "Profiles" -> "Keys" -> "Left option key:" -> (set as "Esc+"))
Ctrl + L  // clear the screen
Ctrl + B  // move back one character
Ctrl + F  // move forward one character
Ctrl + A  // go to the beginning of line
Ctrl + E  // go to the end of line
Option + B  // move the cursor backward one word
Option + F  // move the cursor forward one word
Ctrl + D  // delete current character
Ctrl + U  // cut the whole line
Ctrl + K  // cut from the cursor to the end of line
Option + D  // cut the word from the cursor
Option + Backspace  // cut the word before the cursor
Ctrl + W  // cut the word before the cursor    When there are non-alphanumeric characters, Ctrl + W behaves different to Option + Backspace in Bash while they behave the same in Zsh.
Ctrl + Y  // paste the last cut text
Option + Y (after using Ctrl + Y)  // loop through the previously cut texts
Option + .  // loop through the arguments of the previous commands
Ctrl + -  // undo the last edit
Ctrl + R  // search through history as you type, repeat Ctrl + R to search further
Ctrl + RR  // search through history the last keyword again
Ctrl + G  // cancel the search and restore the last location in history
Ctrl + XX  // move the cursor between another position and the current position

- copy the working directory path to the clipboard without the newline
pwd | awk '{printf "%s", $0}' | pbcopy
printf "`pwd`" | pbcopy
echo -n $(pwd) | pbcopy

- assign the quoted form of the path of file "text.txt" in the working directory to variable "thePath"
thePath=\"$(echo -n $(pwd)/$(echo -n text.txt))\"    # "text.txt" can be auto-completed using Tab key

- copy the last command to the clipboard
history | tail -n 1 | awk 'match($0, / [^ ]+  /) {printf "%s", substr($0, RLENGTH + 1)}' | pbcopy

- extract to the clipboard the Reference Number for intellectual property management from a path of a file or folder stored in the clipboard
pbpaste | awk 'match($0, /[PTDC][0-9]+\/[^\/]+/) {str = substr($0, RSTART, RLENGTH); sub(/\//, "", str); printf "%s", str}' | pbcopy
e.g. $ pbpaste
     /Users/JohnDoe/Intellectual Properties/Applications/T140801/KR/02_1OA/OA.pdf%
     $ pbpaste | awk 'match($0, /[PTDC][0-9]+\/[^\/]+/) {str = substr($0, RSTART, RLENGTH); sub(/\//, "", str); printf "%s", str}' | pbcopy
     $ pbpaste
     T140801KR%
     $

- differences among '<', '<<' and '<<<'
'<'  // redirection
e.g. $ awk '{print}' < text.txt
     ...
     $
'<<'  // here document
e.g. $ awk '{print}' << haha
     heredoc> ha
     heredoc> ha
     heredoc> haha
     ha
     ha
     $
'<<<'  // here string
e.g. $ awk '{print}' <<< haha
     haha
     $ awk '{print}' <<< "haha"
     haha
     $ awk '{print}' <<< cat text.txt
     ...
     $

- usage of command 'awk'
e.g. $ cat text.txt
     1 a
     2 b
     3 c
     $ awk '{print $2}' text.txt
     a
     b
     c
     $ awk '/2+/ {print}' text.txt
     2 b
     $ echo aaa bbb ccc | awk 'match($0, /b+/) {printf "%s", substr($0, RSTART, RLENGTH)}'
     bbb%
     $ echo aaa_bbb_ccc | awk -F '_' '{print $1$2$3}'
     aaabbbccc
     $

- 'awk'의 용법 중에서 "awk PATTERN {ACTION} FILE" 포맷의 PATTERN 부분에 대해
awk 'EXPRESSION {COMMAND} FILE    # FILE 내의 각 행마다 EXPRESSION을 만족하는지 여부를 검사하고 EXPRESSION을 만족하는 각 행에 대해 COMMAND를 수행함.
awk 'EXPRESSION1,EXPRESSION2 {COMMAND} FILE    # FILE 내의 각 행을 순차적으로 검사하면서 EXPRESSION1을 가장 먼저 만족하는 제1행을 찾아냄. 만약 제1행이 존재하지 않는다면 아무 행에 대하여도 COMMAND를 수행하지 않음. 만약 제1행이 존재한다면 제1행부터 각 행을 순차적으로 검사하면서 EXPRESSION2를 가장 먼저 만족하는 제2행을 찾아냄. 만약 제2행이 존재하지 않는다면 제1행부터 마지막 행까지의 각 행에 대해 COMMAND를 수행함. 만약 제2행이 존재한다면 제1행부터 제2행까지의 각 행에 대해 COMMAND를 수행하고, 제2행의 다음 행부터 각 행을 순차적으로 검사하면서 EXPRESSION1을 가장 먼저 만족하는 새로운 제1행을 찾아내는 단계부터 반복함.
e.g. awk '0,0 {COMMAND}' FILE    # EXPRESSION1을 만족하는 행이 없으므로 아무 행에 대하여도 COMMAND를 수행하지 않음.
     awk '0,1 {COMMAND}' FILE    # EXPRESSION1을 만족하는 행이 없으므로 아무 행에 대하여도 COMMAND를 수행하지 않음.
     awk '1,0 {COMMAND}' FILE    # 첫번째 행이 EXPRESSION1을 가장 먼저 만족하고 EXPRESSION2를 만족하는 행이 없으므로 첫번째 행부터 마지막 행까지의 각 행에 대해 COMMAND를 수행함.
     awk '1,1 {COMMAND}' FILE    # 첫번째 행이 EXPRESSION1 및 EXPRESSION2를 가장 먼저 만족하므로 첫번째 행에 대해 COMMAND를 수행하고, 두번째 행부터 마지막 행까지의 각 행도 EXPRESSION1 및 EXPRESSION2를 만족하므로 두번째 행부터 마지막 행까지의 각 행에 대하여도 COMMAND를 수행함. 결국 첫번째 행부터 마지막 행까지의 각 행에 대해 COMMAND를 수행함.
     awk 'NR!=1,0 {COMMAND}' FILE    # 행의 순번이 1과 같지 않다는 의미의 EXPRESSION1을 두번째 행이 가장 먼저 만족하고 EXPRESSION2를 만족하는 행이 없으므로 두번째 행부터 마지막 행까지의 각 행에 대해 COMMAND를 수행함.
     awk 'NR!=1,1 {COMMAND}' FILE    # 행의 순번이 1과 같지 않다는 의미의 EXPRESSION1을 두번째 행이 가장 먼저 만족하고 두번째 행이 EXPRESSION2도 만족하므로 두번째 행에 대해 COMMAND를 수행하고, 세번째 행부터 마지막 행까지의 각 행도 EXPRESSION1 및 EXPRESSION2를 만족하므로 세번째 행부터 마지막 행까지의 각 행에 대하여도 COMMAND를 수행함. 결국 두번째 행부터 마지막 행까지의 각 행에 대해 COMMAND를 수행함.

- usage of command 'sed'
e.g. $ echo hihi | sed 's/hi/hello/g'
     hellohello
     $

- open a file with MacVim
mvim <fileName>
e.g. $ mvim report.txt

- open Finder for the current path
open .

- activate the topmost window of a specified application
open -a <applicationName>
e.g. $ open -a MacVim
