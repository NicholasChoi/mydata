- setting the preferred language
System Settings -> General -> Language & Region -> Preferred Languages -> (set as "English    English - Primary")

- enabling a tap on the trackpad to function as a click
System Settings -> Trackpad -> Point & Click -> (turn on "Tap to click")

- adjusting the keyboard settings
System Settings -> Keyboard -> (set "Key repeat rate" as the fastest and "Delay until repeat" as the shortest)

- changing the keyboard shortcuts of Google Chrome
System Settings -> Keyboard -> Keyboard Shortcuts... -> App Shortcuts -> (add an item with "Google Chrome.app" as "Application", "Bookmark This Tab..." as "Menu Title", and "command + l" as "Keyboard Shortcut" and an item with "Google Chrome.app" as "Application", "Open Location..." as "Menu Title", and "command + d" as "Keyboard Shortcut")

- enabling key repeats on a Mac
defaults write -g ApplePressAndHoldEnabled 0

- disabling mouse acceleration on a Mac
defaults write .GlobalPreferences com.apple.mouse.scaling -1
defaults write .GlobalPreferences com.apple.trackpad.scaling -1
defaults write .GlobalPreferences com.apple.scrollwheel.scaling 0.1
(Run the above in Terminal.app, log out, and then back in. If it didn't work something else has probably touched the file. That's unlikely to happen shortly after a clean login, so just do it again. If you succeed, don't be afraid to change mouse settings in System Preferences. It'll be left at -1 as long as you don't touch the speed slider.)

- caching GitHub password (credential helper)
https://help.github.com/articles/caching-your-github-password-in-git/
http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github

- iTerm2
https://www.iterm2.com/

- zsh & oh-my-zsh
https://nolboo.github.io/blog/2015/08/21/oh-my-zsh/

- better auto-completion for oh-my-zsh
http://stackoverflow.com/questions/24226685/have-zsh-return-case-insensitive-auto-complete-matches-but-prefer-exact-matches 
Create a file ~/.oh-my-zsh/custom/better-completion.zsh (assuming you are using default paths for oh-my-zsh) with the following line.
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

- brew
https://brew.sh/
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
(Alternatively, the following command can be used.)
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

- python
brew install python@2
pip install --upgrade pip setuptools
brew install python
pip3 install --upgrade pip setuptools wheel

- tig
brew install tig

- git flow
brew install git-flow

- wget
brew install wget

- vim (for getting latest version)
brew install vim
(restarting the terminal is needed after the installation)

- httpie
brew install httpie
(httpie usage:
 $ http -f POST www.test.com:5001/remove_messages message_thread_id=99999999)

- setting vim as the editor for git in order to prevent commit errors
git config --global core.editor $(which vim)

- shell script for toggling Karabiner profile
(Additionally, it is recommended to set a shortcut key combination at BetterTouchTool on "Execute Terminal Command" with the following script.)
if test "$(/Applications/Karabiner.app/Contents/Library/bin/karabiner selected)" == "0";
    then /Applications/Karabiner.app/Contents/Library/bin/karabiner select 1;
    else /Applications/Karabiner.app/Contents/Library/bin/karabiner select 0;
fi

- a collection of Alfred 2 workflows
https://github.com/zenorocha/alfred-workflows

- enabling to use Vim on any input boxes
https://github.com/cknadler/vim-anywhere

- how to copy the path of a file or folder to the clipboard in Finder
1) Right-click at a file or folder.
2) Hold down the OPTION key to reveal a menu item of "Copy (filename) as Pathname".
3) Select the menu item of "Copy (filename) as Pathname".

- an AppleScript for extracting to the clipboard the Reference Number for intellectual property management from the path of the working folder in Finder
(You can create a macOS Service using Automator with the following code.)
on run {input, parameters}
	
	try
		tell application "Finder" to set thePath to POSIX path of (target of window 1 as alias)
		do shell script "awk 'match($0, /(FW|RO)?[PTDCR][0-9]+\\/[^\\/]+/) {str = substr($0, RSTART, RLENGTH); sub(/\\//, \"\", str); printf \"%s\", str}' <<< " & quoted form of thePath & " | pbcopy"
	on error
		beep
	end try
	
	return input
end run

- an AppleScript for copying to the clipboard the path of the working folder in Finder
(You can create a macOS Service using Automator with the following code.)
on run {input, parameters}
	
	try
		tell application "Finder" to set the clipboard to POSIX path of (target of window 1 as alias)
	on error
		beep
	end try
	
	return input
end run

- open a terminal from a folder in Finder
right-click a file or folder in Finder -> "New iTerm2 Tab Here"

- set to the List View mode in Finder
Command + 2

- move the cursor to the top item in the list view in Finder
Option + Up Arrow

- move the cursor to the bottom item in the list view in Finder
Option + Down Arrow

- an AppleScript expression to display a pop-up message dialog
display dialog "Text to Be Displayed"

- toggle to show hidden files in Finder
Command + Shift + .

- get the properties of a window
1) Run "Script Editor.app".
2) Paste the following script into the script pane, and then press the "Run the Script" button.
tell application "<applicationName>" to get properties of first window
e.g. tell application "Google Chrome" to get properties of first window
3) Check the result pane.

- an AppleScript for use in Alfred Workflows to activate a specific tab in Chrome
on alfred_script(q)
    tell application "Google Chrome"
        set i to 0
        repeat with t in (tabs of first window)
            set i to i + 1
            if URL of t contains q then
                set (active tab index of first window) to i
                exit repeat
            end if
        end repeat
    end tell
    do shell script "open -a Google\\ Chrome"
end alfred_script

- restart the Touch Bar on a MacBook when it does not work normally
sudo pkill TouchBarServer
